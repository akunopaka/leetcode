// 746. Min Cost Climbing Stairs
// https://leetcode.com/problems/min-cost-climbing-stairs/

// .JS
var minCostClimbingStairs = function (cost) {
    const length = cost.length;
    let current = cost[1];
    let prev = cost[0];
    for (let i = 2; i < length; i++) {
        let tmp = current;
        current = Math.min(prev, current) + cost[i];
        prev = tmp;
    }
    return Math.min(prev, current);
};
//-- OR --
var minCostClimbingStairs = function (cost) {
    const length = cost.length
    for (let i = 2; i < length; i++) {
        cost[i] += Math.min(cost[i - 2], cost[i - 1])
    }
    return Math.min(cost[length - 1], cost[length - 2])
}


// PHP
class Solution
{
    /**
     * @param Integer[] $cost
     * @return Integer
     */
    function minCostClimbingStairs($cost)
    {
        $length = count($cost);
        for ($i = 2; $i < $length; $i++) {
            $cost[$i] += min($cost[$i - 1], $cost[$i - 2]);
        }
        return min($cost[$length - 1], $cost[$length - 2]);
    }
}
//-- OR --
class Solution {
    /**
     * @param Integer[] $cost
     * @return Integer
     */
    function minCostClimbingStairs($cost)
    {
        $length = count($cost);
        $prev2 = $cost[0];
        $prev1 = $cost[1];
        for ($i = 2; $i < $length; $i++) {
            $next = min($prev2, $prev1) + $cost[$i];
            $prev2 = $prev1;
            $prev1 = $next;
        }
        return min($prev2, $prev1);
    }
}