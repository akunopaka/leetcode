// 875. Koko Eating Bananas
// https://leetcode.com/problems/koko-eating-bananas/
// Medium
//Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
//Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
//Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
//Return the minimum integer k such that she can eat all the bananas within h hours.
//
//Example 1:
//Input: piles = [3,6,7,11], h = 8
//Output: 4
//Example 2:
//Input: piles = [30,11,23,4,20], h = 5
//Output: 30
//Example 3:
//Input: piles = [30,11,23,4,20], h = 6
//Output: 23
//
//Constraints:
//1 <= piles.length <= 104
//piles.length <= h <= 109
//1 <= piles[i] <= 109


// .JS
var minEatingSpeed = function (piles, h) {
    let maxPile = 0;
    for (let i = 0; i < piles.length; i++) {
        maxPile = Math.max(maxPile, piles[i]);
    }

    let left = Math.ceil(piles.reduce((a, b) => a + b, 0) / h), right = maxPile;
    while (left < right) {
        let mid = Math.floor((left + right) / 2);
        let hours = 0;
        for (let i = 0; i < piles.length; i++) {
            hours += Math.ceil(piles[i] / mid);
        }
        if (hours > h) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left;
};
//-- OR --
/**
 * NOT MY SOLUTION
 *
 * @param {number[]} piles
 * @param {number} h
 * @return {number}
 */
var minEatingSpeed = function(piles, h) {
    function canEatAll(piles, h, k) {
        let hours = 0;
        for (let i = 0; i < piles.length; i++) {
            hours += Math.ceil(piles[i] / k);
        }
        return hours <= h;
    }

    let maxPile = 0;
    for (let i = 0; i < piles.length; i++) {
        maxPile = Math.max(maxPile, piles[i]);
    }

    let left = 1, right = maxPile;
    while (left < right) {
        let mid = Math.floor((left + right) / 2);
        if (canEatAll(piles, h, mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }

    return left;
};



// PHP
class Solution
{
    /**
     * @param Integer[] $piles
     * @param Integer $h
     * @return Integer
     */
    function minEatingSpeed(array $piles, int $h): int
    {
        $minK = 1;
        $maxK = max($piles);
        while ($minK <= $maxK) {
            $midK = floor($minK + ($maxK - $minK) / 2);
            // count K hours to eat all
            $k = 0;
            foreach ($piles as $bananas) {
                $k += ceil($bananas / $midK);
                if ($k > $h) break;
            }

            if ($k <= $h) {
                $maxK = $midK - 1;
            } else {
                $minK = $midK + 1;
            }
        }
        return $minK;
    }
}

//-- OR --

class Solution
{
    /**
     * @param Integer[] $piles
     * @param Integer $h
     * @return Integer
     */
    function minEatingSpeed(array $piles, int $h): int
    {
        $minK = 1;
        $maxK = max($piles);
//        $maxK = PHP_INT_MAX;
        while ($minK < $maxK) {
            $midK = floor(($maxK + $minK) / 2);
            $k = 0;
            foreach ($piles as $bananas) {
                $k += ceil($bananas / $midK);
                if ($k > $h) break;
            }
            if ($k > $h) {
                $minK = $midK + 1;
            } else {
                $maxK = $midK;
            }
        }
        return $minK;
    }
}
