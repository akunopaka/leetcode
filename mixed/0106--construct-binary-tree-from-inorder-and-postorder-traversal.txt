// 106. Construct Binary Tree from Inorder and Postorder Traversal
// https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
// Medium
// Companies
// Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.
//
// Example 1:
// Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
// Output: [3,9,20,null,null,15,7]
// Example 2:
// Input: inorder = [-1], postorder = [-1]
// Output: [-1]
//
// Constraints:
// 1 <= inorder.length <= 3000
// postorder.length == inorder.length
// -3000 <= inorder[i], postorder[i] <= 3000
// inorder and postorder consist of unique values.
// Each value of postorder also appears in inorder.
// inorder is guaranteed to be the inorder traversal of the tree.
// postorder is guaranteed to be the postorder traversal of the tree.


// .JS
var buildTree = function (inorder, postorder) {
    if (!inorder.length || !postorder.length) return null;
    let root = new TreeNode(postorder.pop());
    let rootIndex = inorder.indexOf(root.val);
    root.right = buildTree(inorder.slice(rootIndex + 1), postorder);
    root.left = buildTree(inorder.slice(0, rootIndex), postorder);
    return root;
};

// PHP





class Solution
{
    /**
     * @param Integer[] $inorder
     * @param Integer[] $postorder
     * @return TreeNode
     */
    function buildTree($inorder, $postorder)
    {
        if (empty($inorder) || empty($postorder)) {
            return null;
        }
        $root = new TreeNode($postorder[count($postorder) - 1]);
        $rootIndex = array_search($root->val, $inorder);
        $root->left = $this->buildTree(array_slice($inorder, 0, $rootIndex), array_slice($postorder, 0, $rootIndex));
        $root->right = $this->buildTree(array_slice($inorder, $rootIndex + 1), array_slice($postorder, $rootIndex, count($postorder) - $rootIndex - 1));
        return $root;
    }
}