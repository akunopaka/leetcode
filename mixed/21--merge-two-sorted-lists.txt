21. Merge Two Sorted Lists
merge-two-sorted-lists
https://leetcode.com/problems/merge-two-sorted-lists/

// .JS
var mergeTwoLists = function(list1, list2) {
    if(list1 === null && list2===null) return null;
    if(list1 === null) return list2;
    if(list2 === null) return list1;
    if(list1.val < list2.val){
        return new ListNode(list1.val, mergeTwoLists(list1.next, list2))
    }
    else{
        return new ListNode(list2.val, mergeTwoLists(list1, list2.next))
    }
};
-- OR --
var mergeTwoLists = function (l1, l2) {
    if (!l1) return l2;
    if (!l2) return l1;
    if (l1.val <= l2.val) {
        l1.next = mergeTwoLists(l1.next, l2);
        return l1;
    } else {
        l2.next = mergeTwoLists(l1, l2.next);
        return l2
    }
};

// PHP
    class Solution_________________2 {
        function mergeTwoLists($list1, $list2)
        {
            $current = $head = new ListNode();
            while ($list1 != null && $list2 != null) {
                if ($list1->val < $list2->val) {
                    $current->next = $list1;
                    $list1 = $list1->next;
                } else {
                    $current->next = $list2;
                    $list2 = $list2->next;
                }
                $current = $current->next;
            }
            if ($list1 != null) {
                $current->next = $list1;
            }
            if ($list2 != null) {
                $current->next = $list2;
            }
            return $head->next;
        }
    }


    -- OR --

    class Solution
    {
        function mergeTwoLists($list1, $list2)
        {
            if (!$list1) return $list2;
            if (!$list2) return $list1;
            if ($list1->val < $list2->val) {
                $list1->next = $this->mergeTwoLists($list1->next, $list2);
                return $list1;
            } else {
                $list2->next = $this->mergeTwoLists($list1, $list2->next);
                return $list2;
            }
        }
    }