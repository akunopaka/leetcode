// 958. Check Completeness of a Binary Tree
// https://leetcode.com/problems/check-completeness-of-a-binary-tree/
// Medium
// Given the root of a binary tree, determine if it is a complete binary tree.
// In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
//
// Example 1:
// Input: root = [1,2,3,4,5,6]
// Output: true
// Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
// Example 2:
// Input: root = [1,2,3,4,5,null,7]
// Output: false
// Explanation: The node with value 7 isn't as far left as possible.
// Constraints:
// The number of nodes in the tree is in the range [1, 100].
// 1 <= Node.val <= 1000



// .JS
// Breadth-first search (BFS) - from left to right - if there is any nodes aftrer null -> means not  a complete binary tree == false
var isCompleteTree = function (root) {
    // Breadth-first search (BFS) - from left to right - if there is any nodes aftrer null -> means not  a complete binary tree == false
    let nullNodeFound = false;
    let queue = [root];
    while (queue.length > 0) {
        const node = queue.shift();
        if (node === null) {
            nullNodeFound = true;
            continue;
        } else {
            if (nullNodeFound) return false;
            queue.push(node.left);
            queue.push(node.right);
        }
    }
    return true;
}

// PHP
class Solution
{
    /**
     * @param TreeNode $root
     * @return Boolean
     */
    function isCompleteTree(?TreeNode $root): bool
    {
        $nullNodeFound = false;
        $queue = [$root];
        while (count($queue) > 0) {
            $node = array_shift($queue);
            if (!$node) {
                $nullNodeFound = true;
            } else {
                if ($nullNodeFound) return false;
                $queue[] = $node->left;
                $queue[] = $node->right;
            }
        }
        return true;
    }
}