// 1046. Last Stone Weight
// https://leetcode.com/problems/last-stone-weight/
// Easy

// .JS
var lastStoneWeight = function (stones) {
    while (stones.length > 1) {
        stones.sort((a, b) => a - b);
        let stone1 = stones.pop();
        let stone2 = stones.pop();
        if (stone1 === stone2) continue;
        else stones.push(stone1 - stone2);
    }
    return stones;
}
//-- OR --
var lastStoneWeight = function (stones) {
    // https://github.com/datastructures-js/priority-queue
    const queue = new MaxPriorityQueue();

    for (stone of stones) queue.enqueue(stone);

    while (queue.size() > 1) {
        let stone1 = queue.dequeue().element;
        let stone2 = queue.dequeue().element;
        if (stone1 !== stone2) queue.enqueue(stone1 - stone2);
    }

    return queue.size() === 0 ? 0 : queue.front().element;
};


// PHP

//-- OR --
class Solution_____akunopaka__HEAP
{
    /**
     * @param Integer[] $stones
     * @return Integer
     */
    function lastStoneWeight($stones)
    {
        $heap = new SplMaxHeap();
        foreach ($stones as $stone) {
            $heap->insert($stone);
        }
        while (!$heap->isEmpty()) {
            // get two stones
            $stone1 = $heap->extract();
            if ($heap->isEmpty()) {
                // no remain stones
                return $stone1;
            }
            $stone2 = $heap->extract();
//            echo PHP_EOL . 'S1: ' . $stone1 . ' S2: ' . $stone2 . ' Remain: ' . ($stone1 - $stone2);
            if ($stone1 != $stone2) {
                $heap->insert($stone1 - $stone2);
            }
        }
        return 0;
    }
}