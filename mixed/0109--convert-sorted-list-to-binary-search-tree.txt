// 109. Convert Sorted List to Binary Search Tree
// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/
// Medium
// Given the head of a singly linked list where elements are sorted in ascending order, convert it to a
// height-balanced binary search tree.
//
// Example 1:
// Input: head = [-10,-3,0,5,9]
// Output: [0,-3,9,-10,null,5]
// Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.
// Example 2:
// Input: head = []
// Output: []
//
//
// Constraints:
// The number of nodes in head is in the range [0, 2 * 104].
// -105 <= Node.val <= 105


// .JS
var sortedListToBST = function (head) {
    if (head == null) return null;
    if (head.next == null) return new TreeNode(head.val);
    let slowPointer = head, fastPointer = head;
    let splitPointer = null;
    while (fastPointer !== null && fastPointer.next !== null) {
        splitPointer = slowPointer;
        slowPointer = slowPointer.next;
        fastPointer = fastPointer.next.next
    }

    splitPointer.next = null;

    return new TreeNode(slowPointer.val, sortedListToBST(head), sortedListToBST(slowPointer.next));
    ;
};

-- OR --

var sortedListToBST = function(head) {
  // Define a recursive function that constructs the binary search tree.
  const constructBST = (start, end) => {
    if (start > end) {
      return null;
    }
    const mid = Math.floor((start + end) / 2);
    const left = constructBST(start, mid - 1);
    const node = new TreeNode(head.val);
    node.left = left;
    head = head.next;
    node.right = constructBST(mid + 1, end);
    return node;
  };

  // Get the length of the linked list.
  let len = 0;
  let curr = head;
  while (curr !== null) {
    len++;
    curr = curr.next;
  }

  // Call the recursive function to construct the binary search tree.
  return constructBST(0, len - 1);
};


// PHP
class Solution
{
    /**
     * @param ListNode $head
     * @return TreeNode
     */
    function sortedListToBST($head)
    {
        if ($head == null) {
            return null;
        }
        if ($head->next === null) {
            return new TreeNode($head->val);
        }

        $slowPointer = $head;
        $fastPointer = $head;
        $splitPointer = null;

        while ($fastPointer != null && $fastPointer->next != null) {
            $splitPointer = $slowPointer;
            $slowPointer = $slowPointer->next;
            $fastPointer = $fastPointer->next->next;
        }

        // split the list
        $splitPointer->next = null;

        $left = $this->sortedListToBST($head);
        $right = $this->sortedListToBST($slowPointer->next);

        return new TreeNode($slowPointer->val, $left, $right);
    }
}